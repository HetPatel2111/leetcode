You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
Increment the large integer by one and return the resulting array of digits.

class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        bool carry = false;
        
        reverse(digits.begin(),digits.end());
        int add=1;
        //int carray = 1;
        
        for(int i=0 ; i<digits.size() ; i++){
            if(carry) digits[i]+carry;
            digits[i] = digits[i]+1;
            
            if(digits[i]>=10){
                carry=true;
                digits[i]%=10;
            }
            else{
                carry = false;
            }
            
            if(!carry) break;

        }
        if(carry){
            digits.push_back(1);
        }

        reverse(digits.begin(),digits.end());
        return digits;
    }
    // vector<int> ans = digits;
    // return ans;
};
